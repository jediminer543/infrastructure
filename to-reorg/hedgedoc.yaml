apiVersion: v1
kind: Namespace
metadata:
  name: gwen-hedgedoc-test
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: hedgedoc
    app.kubernetes.io/component: hedgedoc
    app.kubernetes.io/part-of: gwen-hedgedoc-test
    app.kubernetes.io/managed-by: gwen
  name: hedgedoc
  namespace: gwen-hedgedoc-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hedgedoc
      app.kubernetes.io/name: hedgedoc
      app.kubernetes.io/component: hedgedoc
      app.kubernetes.io/part-of: gwen-hedgedoc-test
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: hedgedoc
        app.kubernetes.io/name: hedgedoc
        app.kubernetes.io/component: hedgedoc
        app.kubernetes.io/part-of: gwen-hedgedoc-test
    spec:
      containers:
        - env:
            - name: CMD_DB_URL
              value: postgres://hedgedoc:password@database:5432/hedgedoc
            - name: CMD_DOMAIN
              value: hedgedoc.dev.gwen.org.uk
            - name: CMD_URL_ADDPORT
              value: "false"
            - name: CMD_PROTOCOL_USESSL
              value: "true"
          image: quay.io/hedgedoc/hedgedoc:1.9.9
          name: app
          ports:
            - containerPort: 3000
              hostPort: 3000
              protocol: TCP
          volumeMounts:
            - mountPath: /hedgedoc/public/uploads
              name: uploads
      restartPolicy: Always
      volumes:
        - name: uploads
          persistentVolumeClaim:
            claimName: uploads
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: hedgedoc
    app.kubernetes.io/component: hedgedoc-service
    app.kubernetes.io/part-of: gwen-hedgedoc-test
  name: hedgedoc
  namespace: gwen-hedgedoc-test
spec:
  ports:
    - name: "3000"
      port: 3000
      targetPort: 3000
  selector:
      app: hedgedoc
      app.kubernetes.io/name: hedgedoc
      app.kubernetes.io/component: hedgedoc
      app.kubernetes.io/part-of: gwen-hedgedoc-test
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    # add an annotation indicating the issuer to use.
    cert-manager.io/cluster-issuer: lets-encrypt-http
  name: hedgedoc-ingress
  namespace: gwen-hedgedoc-test
spec:
  rules:
  - host: hedgedoc.dev.gwen.org.uk
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: hedgedoc
            port:
              number: 3000
  tls:
  - hosts:
    - hedgedoc.dev.gwen.org.uk
    secretName: hedgedoc-dev-cert
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: database
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: gwen-hedgedoc-test
  name: hedgedoc-database
  namespace: gwen-hedgedoc-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: database
      app.kubernetes.io/name: postgres
      app.kubernetes.io/component: database
      app.kubernetes.io/part-of: gwen-hedgedoc-test
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: database
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: gwen-hedgedoc-test
    spec:
      containers:
        - env:
            - name: POSTGRES_DB
              value: hedgedoc
            - name: POSTGRES_PASSWORD
              value: password
            - name: POSTGRES_USER
              value: hedgedoc
            - name: PGDATA
              value: /pgdb/data
          image: docker.io/postgres:13.4-alpine
          name: database
          volumeMounts:
            - mountPath: /pgdb
              name: database
      restartPolicy: Always
      volumes:
        - name: database
          persistentVolumeClaim:
            claimName: database
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: hedgedoc
    app.kubernetes.io/component: hedgedoc-service
    app.kubernetes.io/part-of: gwen-hedgedoc-test
  name: database
  namespace: gwen-hedgedoc-test
spec:
  ports:
    - name: "postgres"
      port: 5432
      targetPort: 5432
  selector:
    app: database
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: gwen-hedgedoc-test
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/name: hedgedoc-database
    app.kubernetes.io/component: storage
    app.kubernetes.io/part-of: gwen-hedgedoc-test
  name: database
  namespace: gwen-hedgedoc-test
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/name: hedgedoc-uploads
    app.kubernetes.io/component: storage
    app.kubernetes.io/part-of: gwen-hedgedoc-test
  name: uploads
  namespace: gwen-hedgedoc-test
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi